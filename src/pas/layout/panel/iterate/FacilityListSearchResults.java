/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package pas.layout.panel.iterate;

import java.awt.Color;
import java.awt.Cursor;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.ArrayList;
import javax.swing.border.EmptyBorder;
import pas.facility.Facility;
import pas.facility.FacilityController;
import pas.models.db.Faciliteit;

/**
 *
 * @author Bob
 */
public class FacilityListSearchResults extends javax.swing.JPanel implements MouseListener {

    private static FacilityController facilitycontroller;
    
    private Facility view;
    private Faciliteit faciliteit;
    // Active result list members
    private static ArrayList<FacilityListSearchResults> activeResultList = new ArrayList<>();
    // Statusses
    public static final int INACTIVE = 1;
    public static final int ACTIVE = 2;
    // Alternating background colors
    public static final Color COLOR_ODD = new Color(255, 255, 255);
    public static final Color COLOR_EVEN = new Color(222, 222, 222);
    /*
     * State
     */
    private int status = FacilityListSearchResults.INACTIVE;
    private Color color = new Color(0, 0, 0);
    private Color backgroundColor; // Alternating
    private int cursor = Cursor.HAND_CURSOR;
    /*
     * Hover style
     */
    private Color hoverColor = new Color(255, 255, 255);
    private Color hoverBackgroundColor = new Color(155, 9, 46);
    /*
     * Active style
     */
    private Color activeColor = new Color(255, 255, 255);
    private Color activeBackgroundColor = new Color(155, 9, 46);

    /**
     * Creates new form FacilityListSearchResults
     */
    public FacilityListSearchResults(Faciliteit faciliteit, Facility view) {
        initComponents();
        lblFacilityName.setText(faciliteit.getOmschrijving());
        lblFacilityId.setText(faciliteit.getId().toString());
        lblFacilityLocation.setText(faciliteit.getVestigingid().toString());
        lblFacilityPrice.setText(faciliteit.getKosten().toString());
        lblFacilityType.setText(faciliteit.getSoort());
        
        this.view = view;
        this.faciliteit = faciliteit;
        
        
        

        setBorder(new EmptyBorder(0, 10, 0, 0));
        setCursor(new Cursor(this.cursor));


        if (FacilityListSearchResults.activeResultList.size() % 2 == 0) {
            setBackground(FacilityListSearchResults.COLOR_ODD);
            this.backgroundColor = FacilityListSearchResults.COLOR_ODD;
        } else {
            setBackground(FacilityListSearchResults.COLOR_EVEN);
            this.backgroundColor = FacilityListSearchResults.COLOR_EVEN;
        }

        FacilityListSearchResults.activeResultList.add(this);
        addMouseListener(this);
    }

    public FacilityController getController() {
        if (null == FacilityListSearchResults.facilitycontroller) {
            FacilityListSearchResults.facilitycontroller = new FacilityController();
        }

        return FacilityListSearchResults.facilitycontroller;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    public static void resetCounter() {
        FacilityListSearchResults.activeResultList.clear();
    }


    /*
     * Toggle status
     * 
     * @return void
     */
    public void toggleStatus() {
        switch (this.status) {
            case 1:
                this.setStatus(FacilityListSearchResults.ACTIVE);
                break;
            case 2:
                this.setStatus(FacilityListSearchResults.INACTIVE);
                break;
        }
    }

    /*
     * Activate or deactivate the button
     * 
     * @param int status
     * @return void
     */
    public void setStatus(int status) {
        switch (status) {
            case 1:
                this.setInactive();
                break;
            case 2:
                this.setActive();
                break;
        }
    }

    @Override
    public void mouseClicked(MouseEvent event) {
        switch (status) {
            case 1:
                setStatus(FacilityListSearchResults.ACTIVE);
                break;
            case 2:
                setStatus(FacilityListSearchResults.INACTIVE);
                break;
        }
        this.view.setFaciliteit(faciliteit);
    }

    @Override
    public void mouseEntered(MouseEvent event) {
        if (null != hoverColor && !color.equals(hoverColor)) {
            lblFacilityId.setForeground(hoverColor);
            lblFacilityName.setForeground(hoverColor);
            lblFacilityLocation.setForeground(hoverColor);
            lblFacilityPrice.setForeground(hoverColor);
            lblFacilityType.setForeground(hoverColor);

        }

        if (null != hoverBackgroundColor && !color.equals(hoverBackgroundColor)) {
            setBackground(hoverBackgroundColor);
        }
    }

    @Override
    public void mouseExited(MouseEvent event) {
        if (status == FacilityListSearchResults.INACTIVE) {
            setInactive();
        } else {
            if (null != activeColor && !color.equals(activeColor)) {
                lblFacilityId.setForeground(activeColor);
                lblFacilityName.setForeground(activeColor);
                lblFacilityLocation.setForeground(activeColor);
                lblFacilityPrice.setForeground(activeColor);
                lblFacilityType.setForeground(activeColor);

            } else {
                lblFacilityId.setForeground(color);
                lblFacilityName.setForeground(color);
                lblFacilityLocation.setForeground(color);
                lblFacilityPrice.setForeground(color);
                lblFacilityType.setForeground(color);

            }

            if (null != activeBackgroundColor && !backgroundColor.equals(activeBackgroundColor)) {
                setBackground(activeBackgroundColor);
            } else {
                setBackground(backgroundColor);
            }
        }
    }

    @Override
    public void mousePressed(MouseEvent e) {
    }

    @Override
    public void mouseReleased(MouseEvent e) {
    }

    /*
     * Activate button
     * 
     * @return void
     */
    private void setActive() {
        // Disable all buttons
        for (FacilityListSearchResults searchResult : FacilityListSearchResults.activeResultList) {
            searchResult.setInactive();
        }

        this.status = FacilityListSearchResults.ACTIVE;
        if (null != activeColor && !color.equals(activeColor)) {
            lblFacilityId.setForeground(activeColor);
            lblFacilityName.setForeground(activeColor);
            lblFacilityLocation.setForeground(activeColor);

        }

        if (null != activeBackgroundColor && !backgroundColor.equals(activeBackgroundColor)) {
            setBackground(activeBackgroundColor);
        }
    }

    /*
     * Deactivate button (back to default state)
     * 
     * @return void
     */
    private void setInactive() {
        this.status = FacilityListSearchResults.INACTIVE;
        lblFacilityId.setForeground(color);
        lblFacilityName.setForeground(color);
        lblFacilityLocation.setForeground(color);
        lblFacilityPrice.setForeground(color);
        lblFacilityType.setForeground(color);

        setBackground(backgroundColor);
    }
//    private void formMouseClicked(java.awt.event.MouseEvent evt) {                                  
//    getController().productAction(
//            Integer.parseInt(this.lblFacilityId.getText()));
//    
//    }                                 

    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        lblFacilityId = new javax.swing.JLabel();
        lblFacilityName = new javax.swing.JLabel();
        lblFacilityPrice = new javax.swing.JLabel();
        lblFacilityLocation = new javax.swing.JLabel();
        lblFacilityType = new javax.swing.JLabel();

        jLabel1.setText("jLabel1");

        lblFacilityId.setText("FacilityId");

        lblFacilityName.setText("FacilityName");

        lblFacilityPrice.setText("FacilityPrice");

        lblFacilityLocation.setText("FacilityLocation");

        lblFacilityType.setText("FacilityType");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblFacilityId)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblFacilityName, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblFacilityPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblFacilityType, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblFacilityLocation, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(lblFacilityId)
                .addComponent(lblFacilityName)
                .addComponent(lblFacilityPrice)
                .addComponent(lblFacilityLocation)
                .addComponent(lblFacilityType))
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel lblFacilityId;
    private javax.swing.JLabel lblFacilityLocation;
    private javax.swing.JLabel lblFacilityName;
    private javax.swing.JLabel lblFacilityPrice;
    private javax.swing.JLabel lblFacilityType;
    // End of variables declaration//GEN-END:variables
}
